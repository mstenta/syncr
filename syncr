#!/usr/bin/python

# Syncr is a script for making rsync easier.
# It will prompt you for all the necessary information,
# assemble the rsync call, and execute it.

import sys, os

# Import the subprocess library. We need this to call rsync at the end.
import subprocess

# Returns a dictionary of default settings.
def default_settings():
    return {

        # Path to the destination directory (files will be copied TO here).
        'destination': '',

        # Array of rsync flags to include (starting with some defaults).
        'flags': [
          'r',  # Recurse into subdirectories.
          'l',  # Copy symlinks as symlinks.
          'x',  # Do not cross filesystem boundaries.
        ],

        # Exclude files according to patterns in excludes.txt (default to True).
        'exclude': True,

        # Delete files from destination that don't exist in source
        # (default to False).
        'delete': False,

        # Run as super user (sudo) (default to False).
        'sudo': False,
    }

# Collect settings from user input.
def collect_input(settings):

    # Collect destination (required).
    destination = raw_input('Destination (no trailing slash): ')
    if not destination:
        sys.exit('Destination is required. Try again.')
    else:
        settings['destination'] = destination

    # Preserve timestamps?
    time = raw_input('Should file timestamps be preserved? [Y/n]: ').lower()
    if time in ('', 'y'):
        settings['flags'].append('t')

    # Preserve group/ownership?
    owner = raw_input('Should file ownership and group be preserved? [Y/n]: ').lower()
    if owner in ('', 'y'):
        settings['flags'].append('og')

    # Preserve permissions?
    perms = raw_input('Should file permissions be preserved? [Y/n]: ').lower()
    if perms in ('', 'y'):
        settings['flags'].append('p')

    # Preserve executability?
    executability = raw_input('Should file executability be preserved? [Y/n]: ').lower()
    if executability in ('', 'y'):
        settings['flags'].append('E')

    # Exclude listed files?
    exclude = raw_input('Should files be excluded from excludes.txt? [Y/n]: ').lower()
    if exclude in ('', 'y'):
        settings['exclude'] = True

    # Delete unmatched target files?
    delete = raw_input('Delete files from the destination if they are not in the source? [y/N]: ').lower()
    if delete in ('', 'n'):
        pass
    elif delete in ('y'):
        settings['delete'] = True
    else:
        sys.exit('Please enter y or n. Try again.')

    # Run as sudo?
    sudo = raw_input('Run rsync as super user (sudo)? [y/N]: ').lower()
    if sudo in ('', 'n'):
        pass
    elif sudo in ('y'):
        settings['sudo'] = True
    else:
        sys.exit('Please enter y or n. Try again.')

    # Return the new settings.
    return settings

# Assemble the rsync command from settings.
def assemble_command(source, settings):

    # Start with an empty command array.
    command = []

    # Add sudo, if specified.
    if settings['sudo']:
        command.append('sudo')

    # Add common pieces to the command.
    command.append('rsync')
    command.append('-vv')
    command.append('--stats')
    command.append('--progress')

    # Assemble flags.
    command.append('-' + ''.join(settings['flags']))

    # Exclude patterns.
    if settings['exclude']:

        # Get the real directory path of this script (resolving symlinks).
        syncr = os.path.dirname(os.path.realpath(__file__))

        # Append the exclude-from argument.
        command.append('--exclude-from')
        command.append(syncr + '/excludes.txt')

    # Delete destination files.
    if settings['delete']:
        command.append('--delete')

    # Append the source and destination.
    command.append(source)
    command.append(settings['destination'])

    # Return the command list.
    return command

# Main script function.
def main():

    # Load default settings.
    settings = default_settings()

    # Collect source (defaults to current directory).
    source_default = './'
    source = raw_input('Source (include trailing slash): [%s] ' %source_default)
    if not source:
        source = source_default

    # Collect user input.
    collect_input(settings)

    # Assemble command.
    command = assemble_command(source, settings)

    # Show what the rsync command will look like and ask for final confirmation.
    command_string = ' '.join(command)
    print "\nThe following rsync command will be executed:"
    print "\n    " + command_string + "\n"
    approval = raw_input('Are you sure you want to continue? [y/N]: ').lower()

    # Execute the call to rsync.
    if approval == 'y':
        subprocess.call(command)
    else:
        sys.exit('Sync canceled.')

# Execute!
if __name__ == "__main__":
    main()
